// This file was generated by counterfeiter
package fakes

import "sync"

type Ranger struct {
	BuildRangeStub        func(contentLength int64) ([]string, error)
	buildRangeMutex       sync.RWMutex
	buildRangeArgsForCall []struct {
		contentLength int64
	}
	buildRangeReturns struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ranger) BuildRange(contentLength int64) ([]string, error) {
	fake.buildRangeMutex.Lock()
	fake.buildRangeArgsForCall = append(fake.buildRangeArgsForCall, struct {
		contentLength int64
	}{contentLength})
	fake.recordInvocation("BuildRange", []interface{}{contentLength})
	fake.buildRangeMutex.Unlock()
	if fake.BuildRangeStub != nil {
		return fake.BuildRangeStub(contentLength)
	} else {
		return fake.buildRangeReturns.result1, fake.buildRangeReturns.result2
	}
}

func (fake *Ranger) BuildRangeCallCount() int {
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	return len(fake.buildRangeArgsForCall)
}

func (fake *Ranger) BuildRangeArgsForCall(i int) int64 {
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	return fake.buildRangeArgsForCall[i].contentLength
}

func (fake *Ranger) BuildRangeReturns(result1 []string, result2 error) {
	fake.BuildRangeStub = nil
	fake.buildRangeReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Ranger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	return fake.invocations
}

func (fake *Ranger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
