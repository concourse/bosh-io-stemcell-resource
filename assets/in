#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/bosh-io-stemcell-resource-request.XXXXXX)

cat > $payload <&0

name=$(jq -r '.source.name // ""' < $payload)
version=$(jq -r '.version.version // ""' < $payload)
fetch_tarball=$(jq -r '.params.tarball != false' < $payload)

if [ -z "$name" ]; then
  echo "must specify source name"
  exit 1
fi

if [ -z "$version" ]; then
  echo "must specify version"
  exit 1
fi

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

mkdir -p $destination

stemcells=$(mktemp $TMPDIR/bosh-io-stemcell-versions.XXXXXX)
stemcell_version=$(mktemp $TMPDIR/bosh-io-stemcell-version.XXXXXX)

curl --retry 5 -f http://bosh.io/api/v1/stemcells/$name -o $stemcells

jq 'map(select(.version == $version))[0] | .light // .regular' \
  --arg version $version \
  < $stemcells \
  > $stemcell_version

url=$(jq -r .url < $stemcell_version)
md5=$(jq -r '.md5 // ""' < $stemcell_version)
sha1=$(jq -r '.sha1 // ""' < $stemcell_version)

if [ "$url" = "null" ]; then
  echo "version $version not found; aborting"
  exit 1
fi

echo "$url" > $destination/url
echo "$version" > $destination/version

if [ "$fetch_tarball" = "true" ]; then
  if ! download_tarball "$url" "$destination/stemcell.tgz" "$md5" "$sha1"; then
    exit 1
  fi
fi

jq -n '{
  version: {
    version: $version
  },
  metadata: [
    {name: "url", value: $url},
    {name: "md5", value: $md5},
    {name: "sha1", value: $sha1}
  ]
}' --arg version "$version" --arg url "$url" --arg md5 "$md5" --arg sha1 "$sha1" >&3
